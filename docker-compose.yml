version: '2'
services:
  contract_observer:
    image: dexdana/backend
    build: .
    depends_on:
      - postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      HTTP_PROVIDER_URL: ${HTTP_PROVIDER_URL}
      WS_PROVIDER_URL: ${WS_PROVIDER_URL}
    links:
      - postgres
    volumes:
      - .:/usr/src/app
    command: >
      python3 observers/contract_observer.py
    restart: on-failure

  etherdelta_observer:
    image: dexdana/backend
    build: .
    depends_on:
      - postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      HTTP_PROVIDER_URL: ${HTTP_PROVIDER_URL}
    links:
      - postgres
    volumes:
      - .:/usr/src/app
    command: >
      python3 observers/etherdelta_observer.py
    restart: on-failure

  websocket_server:
    image: dexdana/backend
    build: .
    depends_on:
      - postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    links:
      - postgres
    ports:
      - "8080:8080"
    volumes:
      - .:/usr/src/app
    command: >
      python3 server/websocket_server.py
    restart: on-failure

  postgres:
    image: postgres:10-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
